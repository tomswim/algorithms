
def longest_substring_with_k_distinct(str1, k):
  # start_index = 0
  # end_index = 0

  # iterate through string starting at left
  # longest = end - start
  #  current string = str1[start:end]
  # count how many characters in string
  # if str[i] in current string and count <= k keep going
    # move end up one
    # count += 1

  window_start = 0
  max_length = 0
  char_frequency = {}

  for window_end in range(len(str1)):
    right_char = str1[window_end]
    if right_char not in char_frequency:
      char_frequency[right_char] = 0
    char_frequency[right_char] += 1

    while len(char_frequency) > k:
      left_char = str1[window_start]
      char_frequency[left_char] -= 1
      if char_frequency[left_char] == 0:
        del char_frequency[left_char]
      window_start += 1

    max_length = max(max_length, window_end-window_start + 1)
  return max_length

def main():

  result = longest_substring_with_k_distinct('araaci', 2)
  print( "longest sub string with no more then k distinct characters: " + str(result))

  result = longest_substring_with_k_distinct('araaci', 1)
  print( "longest sub string with no more then k distinct characters: " + str(result))

  result = longest_substring_with_k_distinct('cbbebi', 3)
  print( "longest sub string with no more then k distinct characters: " + str(result))


main()